{"version":3,"sources":["components/employee-job-text/employee-job-text.js","components/employee-job/employee-job.js","components/employee-name-text/employee-name-text.js","components/employee-name/employee-name.js","components/employee-salary-text/employee-salary-text.js","components/employee-salary/employee-salary.js","components/employee-row/employee-row.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeJobText","props","job","EmployeeJob","empJob","EmployeeNameText","name","EmployeeName","empName","EmployeeSalaryText","salary","EmployeeSalary","empSal","EmployeeCard","data","App","dataToDisplay","dataFilter","ifLeads","ifSeniors","ifJuniors","dataCopy","filter","item","handleCheckLeads","e","console","log","target","checked","leadsVal","setState","leads","state","seniors","juniors","handleCheckSeniors","seniorsVal","handleCheckJuniors","juniorsVal","sortSalary","sort","a","b","Container","Jumbotron","Form","Group","controlId","Check","type","label","defaultChecked","onChange","this","Table","striped","bordered","hover","variant","className","scope","onClick","map","i","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSASeA,MAPf,SAAyBC,GAErB,OACA,8BAAOA,EAAMC,MCSFC,MAXf,SAAqBF,GAEjB,OACI,4BACI,kBAAC,EAAD,CACIC,IAAOD,EAAMG,WCCdC,MAPf,SAA0BJ,GAEtB,OACA,8BAAOA,EAAMK,OCSFC,MAXf,SAAsBN,GAElB,OACI,4BACI,kBAAC,EAAD,CACIK,KAAQL,EAAMO,YCAfC,MANf,SAA4BR,GACxB,OACA,kCAAQA,EAAMS,SCUHC,MAXf,SAAwBV,GAEpB,OACI,4BACI,kBAAC,EAAD,CACAS,OAAUT,EAAMW,WCqBbC,MAvBf,SAAsBZ,GAElB,OACI,4BAEI,kBAAC,EAAD,CACIO,QAASP,EAAMa,KAAKR,OAIxB,kBAAC,EAAD,CACIF,OAAQH,EAAMa,KAAKZ,MAGvB,kBAAC,EAAD,CACIU,OAAQX,EAAMa,KAAKJ,W,8CCsOpBK,E,kDA5Ob,aAAe,IAAD,8BACZ,gBAHFC,cAAgBF,EAEF,EAoBdG,WAAa,SAACC,EAASC,EAAWC,GAChC,IAAIC,EAAWP,GAEXI,GAAYC,GAAcC,IAC5BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,mBAAbA,EAAKrB,QAIbgB,GAAYC,GAAcC,IAC7BC,EAAW,IAERH,IAAWC,GAAcC,IAC5BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,iBAAbA,EAAKrB,QAIbgB,GAAYC,IAAaC,IAC5BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,iBAAbA,EAAKrB,QAIdgB,GAAWC,IAAcC,IAC3BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,mBAAbA,EAAKrB,KAAyC,iBAAbqB,EAAKrB,QAI/CgB,IAAYC,GAAaC,IAC3BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,mBAAbA,EAAKrB,KAAyC,iBAAbqB,EAAKrB,QAI/CgB,GAAWC,GAAaC,IAC1BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,mBAAbA,EAAKrB,KAAyC,iBAAbqB,EAAKrB,KAAuC,iBAAbqB,EAAKrB,SAI7EgB,GAAWC,GAAaC,IAC3BC,EAAWA,EAASC,QAClB,SAACC,GACC,MAAoB,iBAAbA,EAAKrB,KAAuC,iBAAbqB,EAAKrB,QAKjD,EAAKc,cAAgBK,GA5ET,EAgFdG,iBAAmB,SAACC,GAClBC,QAAQC,IAAIF,EAAEG,OAAOC,SACrB,IAAIC,EAAWL,EAAEG,OAAOC,QACxB,EAAKE,SAAS,CACZC,MAAOF,IAET,EAAKb,WAAWa,EAAU,EAAKG,MAAMC,QAAS,EAAKD,MAAME,UAtF7C,EAyFdC,mBAAqB,SAACX,GACpBC,QAAQC,IAAIF,EAAEG,OAAOC,SACrB,IAAIQ,EAAaZ,EAAEG,OAAOC,QAC1B,EAAKE,SAAS,CACZG,QAASG,IAEX,EAAKpB,WAAW,EAAKgB,MAAMD,MAAOK,EAAY,EAAKJ,MAAME,UA/F7C,EAkGdG,mBAAqB,SAACb,GACpBC,QAAQC,IAAIF,EAAEG,OAAOC,SACrB,IAAIU,EAAad,EAAEG,OAAOC,QAC1B,EAAKE,SAAS,CACZI,QAASI,IAEX,EAAKtB,WAAW,EAAKgB,MAAMD,MAAO,EAAKC,MAAMC,QAASK,IAxG1C,EAiHdC,WAAa,SAACf,GACZC,QAAQC,IAAIF,GACZ,EAAKT,cAAcyB,MACjB,SAACC,EAAGC,GACF,OAAQD,EAAEhC,OAASiC,EAAEjC,UAGzB,EAAKqB,SACH,CACEjB,KAAK,EAAKE,iBAxHd,EAAKiB,MAAQ,CACXD,OAAO,EACPE,SAAS,EACTC,SAAS,EACTrB,KAAM,EAAKE,eAEbU,QAAQC,IAAI,EAAKM,MAAO,SARZ,E,qDAgIZ,OACE,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4CACA,uFAIA,6BACA,kEAGA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CACEC,UAAU,qBAEV,kBAACF,EAAA,EAAKG,MAAN,CACEC,KAAK,WACLC,MAAM,iBACNC,eAAe,OAEfC,SAAUC,KAAK9B,oBAGnB,kBAACsB,EAAA,EAAKC,MAAN,CACEC,UAAU,qBAEV,kBAACF,EAAA,EAAKG,MAAN,CACEC,KAAK,WACLC,MAAM,eACNC,eAAe,OAEfC,SAAUC,KAAKlB,sBAGnB,kBAACU,EAAA,EAAKC,MAAN,CACEC,UAAU,qBAEV,kBAACF,EAAA,EAAKG,MAAN,CACEC,KAAK,WACLC,MAAM,eACNC,eAAe,OACfC,SAAUC,KAAKhB,uBAKrB,6BACA,0FAOF,6BACE,kBAACiB,EAAA,EAAD,CACEC,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLC,QAAQ,OACRC,UAAU,SACV,+BACE,4BACE,wBACEC,MAAM,OADR,QAMA,wBACEA,MAAM,OADR,OAMA,wBACEA,MAAM,MACNC,QAASR,KAAKd,YAFhB,YASJ,+BACGc,KAAKtC,cAAc+C,KAClB,SAACxC,EAAMyC,GACL,OACE,kBAAC,EAAD,CACElD,KAAMS,EACN0C,IAAKD,e,GA/NTE,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,a","file":"static/js/main.56ccfda9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction EmployeeJobText(props) {\n    // console.log('They are a developer')\n    return (\n    <span>{props.job}</span>\n    )\n};\n\nexport default EmployeeJobText;","import React from 'react';\nimport EmployeeJobText from '../employee-job-text/employee-job-text';\n\nfunction EmployeeJob(props) {\n    // console.log('They have a job')\n    return (\n        <td>\n            <EmployeeJobText\n                job = {props.empJob}\n            ></EmployeeJobText>\n        </td>\n    )\n};\n\nexport default EmployeeJob;","import React from 'react';\n\nfunction EmployeeNameText(props) {\n    // console.log('They are named Bob', props.data)\n    return (\n    <span>{props.name}</span>\n    )\n};\n\nexport default EmployeeNameText;","import React from 'react';\nimport EmployeeNameText from '../employee-name-text/employee-name-text';\n\nfunction EmployeeName(props) {\n    // console.log('They have a name', props)\n    return (\n        <td>\n            <EmployeeNameText\n                name = {props.empName}\n            ></EmployeeNameText>\n        </td>\n    )\n};\n\nexport default EmployeeName;","import React from 'react';\n\nfunction EmployeeSalaryText(props) {;\n    return (\n    <span>${props.salary}</span>\n    )\n};\n\nexport default EmployeeSalaryText;","import React from 'react';\nimport EmployeeSalaryText from '../employee-salary-text/employee-salary-text';\n\nfunction EmployeeSalary(props) {\n    // console.log('They are paid')\n    return (\n        <td>\n            <EmployeeSalaryText\n            salary = {props.empSal}\n            ></EmployeeSalaryText>\n        </td>\n    )\n};\n\nexport default EmployeeSalary;","import React from 'react';\nimport EmployeeJob from '../employee-job/employee-job';\nimport EmployeeName from '../employee-name/employee-name';\nimport EmployeeSalary from '../employee-salary/employee-salary';\n\n\nfunction EmployeeCard(props) {\n    // console.log('I have an employee')\n    return (\n        <tr>\n\n            <EmployeeName\n                empName={props.data.name}\n            >\n\n            </EmployeeName>\n            <EmployeeJob\n                empJob={props.data.job}>\n\n            </EmployeeJob>\n            <EmployeeSalary\n                empSal={props.data.salary}>\n\n            </EmployeeSalary>\n        </tr>\n    )\n};\n\n\nexport default EmployeeCard;","import React from 'react';\nimport EmployeeRow from './components/employee-row/employee-row'\nimport './App.css';\nimport data from './data/data.json';\nimport Table from 'react-bootstrap/Table';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\n// import dataFilter from './dataFilter';\n\nclass App extends React.Component {\n\n  dataToDisplay = data;\n\n  constructor() {\n    super()\n    this.state = {\n      leads: true,\n      seniors: true,\n      juniors: true,\n      data: this.dataToDisplay\n    }\n    console.log(this.state, 'hello')\n  };\n\n  // switchLeads = () => {\n  //   // if (this.state.leads === true) {\n  //   //   this.setState({leads: false})\n  //   // } else {\n  //   //   this.setState({leads: true})\n  //   // } return \n  //   return this.value\n  // };\n\n  dataFilter = (ifLeads, ifSeniors, ifJuniors) => {\n    let dataCopy = data;\n\n    if (ifLeads && !ifSeniors && !ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Developer lead'\n        }\n      )\n    }\n    if (!ifLeads && !ifSeniors && !ifJuniors) {\n      dataCopy = [];\n    }\n    if (!ifLeads && ifSeniors && !ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Sr Developer'\n        }\n      )\n    }\n    if (!ifLeads && !ifSeniors && ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Jr Developer'\n        }\n      )\n    }\n    if (ifLeads && ifSeniors && !ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Developer lead' || item.job === 'Sr Developer'\n        }\n      )\n    }\n    if (ifLeads && !ifSeniors && ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Developer lead' || item.job === 'Jr Developer'\n        }\n      )\n    }\n    if (ifLeads && ifSeniors && ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Developer lead' || item.job === 'Jr Developer' || item.job === 'Sr Developer'\n        }\n      )\n    }\n    if (!ifLeads && ifSeniors && ifJuniors) {\n      dataCopy = dataCopy.filter(\n        (item) => {\n          return item.job === 'Jr Developer' || item.job === 'Sr Developer'\n        }\n      )\n    }\n    // console.log(dataCopy)\n    this.dataToDisplay = dataCopy\n\n  }\n\n  handleCheckLeads = (e) => {\n    console.log(e.target.checked)\n    let leadsVal = e.target.checked\n    this.setState({\n      leads: leadsVal\n    })\n    this.dataFilter(leadsVal, this.state.seniors, this.state.juniors)\n  }\n\n  handleCheckSeniors = (e) => {\n    console.log(e.target.checked)\n    let seniorsVal = e.target.checked\n    this.setState({\n      seniors: seniorsVal\n    })\n    this.dataFilter(this.state.leads, seniorsVal, this.state.juniors)\n  }\n\n  handleCheckJuniors = (e) => {\n    console.log(e.target.checked)\n    let juniorsVal = e.target.checked\n    this.setState({\n      juniors: juniorsVal\n    })\n    this.dataFilter(this.state.leads, this.state.seniors, juniorsVal)\n  }\n\n  // dataSort = (e) => {\n  //   this.dataToDisplay.sort(\n\n  //   );\n  // }\n\n  sortSalary = (e) => {\n    console.log(e)\n    this.dataToDisplay.sort(\n      (a, b) => {\n        return (a.salary - b.salary)\n      }\n    )\n    this.setState(\n      {\n        data:this.dataToDisplay\n      }\n    )\n  }\n\n  render() {\n    return (\n      <Container>\n        <Jumbotron>\n          <h1>Hello, User!</h1>\n          <p>\n            Feel free to sort, filter, and view the employees below.\n          </p>\n          {/* <Button variant=\"primary\">Add an Employee</Button>{' '} */}\n          <hr></hr>\n          <p>\n            Which Roles do you want to include?\n          </p>\n          <Form>\n            <Form.Group\n              controlId=\"formBasicCheckbox\"\n            >\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Developer Lead\"\n                defaultChecked='true'\n                // id='leadCheck'\n                onChange={this.handleCheckLeads}\n              />\n            </Form.Group>\n            <Form.Group\n              controlId=\"formBasicCheckbox\"\n            >\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Sr Developer\"\n                defaultChecked='true'\n\n                onChange={this.handleCheckSeniors}\n              />\n            </Form.Group>\n            <Form.Group\n              controlId=\"formBasicCheckbox\"\n            >\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Jr Developer\"\n                defaultChecked='true'\n                onChange={this.handleCheckJuniors}\n\n              />\n            </Form.Group>\n          </Form>\n          <hr></hr>\n          <p>\n            Click the Salary label to sort salaries lowest to highest.\n          </p>\n        </Jumbotron>\n\n        {/* ERIC CHECK THE PASSWORD GENERATOR USE THE SAME LOGIC FOR THE ICNLUSION OF VARIABLES \n        USE A SERIES OF IF STATEMENTS FOR YOUR LOGIC AND CREATE  A COPY OF THE BASE DATA TO CYCLE THROUGH AND MANIPULATE */}\n        <div>\n          <Table\n            striped\n            bordered\n            hover\n            variant=\"dark\"\n            className=\"table\">\n            <thead>\n              <tr>\n                <th\n                  scope=\"col\"\n                // onClick= {}\n                >\n                  Name\n                          </th>\n                <th\n                  scope=\"col\"\n                // onClick= {}\n                >\n                  Job\n                          </th>\n                <th\n                  scope=\"col\"\n                  onClick={this.sortSalary}\n                >\n                  Salary\n                          </th>\n              </tr>\n\n            </thead>\n            <tbody>\n              {this.dataToDisplay.map(\n                (item, i) => {\n                  return (\n                    <EmployeeRow\n                      data={item}\n                      key={i}\n                    >\n                      {/* {console.log(i)} */}\n                    </EmployeeRow>\n                  )\n                }\n              )}\n            </tbody>\n          </Table>\n        </div>\n\n      </Container>\n    )\n\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}